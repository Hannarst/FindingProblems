# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-09-23 13:10
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activation_code', models.CharField(max_length=20)),
                ('activation_deadline', models.DateField()),
                ('activated', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(max_length=200)),
                ('type', models.CharField(choices=[(0, 'paradigm'), (1, 'data-structure'), (2, 'complexity')], default='paradigm', max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('time', models.TimeField(default=datetime.time(0, 0))),
            ],
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('problem_description', models.TextField()),
                ('problem_description_html', models.TextField()),
                ('example_input', models.TextField(default='No example input provided.')),
                ('example_input_html', models.TextField()),
                ('example_output', models.TextField(default='No example output provided.')),
                ('example_output_html', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('difficulty', models.IntegerField(choices=[(0, 'Very Easy'), (1, 'Easy'), (2, 'Average'), (3, 'Difficult'), (4, 'Very Difficult')], default=0)),
                ('problem_privacy', models.BooleanField(default=True, verbose_name='Private (problem)')),
                ('forked_from', models.CharField(default='Original', max_length=200)),
                ('categories', models.ManyToManyField(blank=True, related_name='paradigms', to='problems.Category')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solution_privacy', models.BooleanField(default=True, verbose_name='Private (solution)')),
                ('solution_description', models.TextField(default='No solution description has been provided.')),
                ('solution_description_html', models.TextField()),
                ('time_limit', models.FloatField(default=0)),
                ('links', models.TextField(default='No links.')),
                ('links_html', models.TextField()),
                ('example_code', models.TextField(default='No example solution code.')),
                ('example_code_html', models.TextField()),
                ('algorithms', models.ManyToManyField(blank=True, related_name='algorithms', to='problems.Category')),
                ('complexity', models.ManyToManyField(blank=True, related_name='complexity', to='problems.Category')),
                ('data_structures', models.ManyToManyField(blank=True, related_name='data_structures', to='problems.Category')),
                ('language', models.ManyToManyField(blank=True, related_name='language', to='problems.Category')),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.Problem')),
            ],
        ),
        migrations.AddField(
            model_name='content',
            name='problem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='problems.Problem'),
        ),
        migrations.AddField(
            model_name='challenge',
            name='problems',
            field=models.ManyToManyField(to='problems.Problem'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together=set([('name', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='problem',
            unique_together=set([('title',)]),
        ),
    ]
